// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "thrift/server.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace om::common;

namespace om {
namespace server {

class serverHandler : virtual public serverIf {
 public:
  serverHandler() {
    // Your initialization goes here
  }

  void get_volume_bounds(bbox& _return) {
    // Your implementation goes here
    printf("get_volume_bounds\n");
  }

  void get_chan_tile(tile& _return, const vector3d& point, const int32_t mipLevel) {
    // Your implementation goes here
    printf("get_chan_tile\n");
  }

  void get_seg_tile(tile& _return, const vector3d& point, const int32_t mipLevel, const int32_t segId) {
    // Your implementation goes here
    printf("get_seg_tile\n");
  }

  void get_seg_bbox(bbox& _return, const int32_t segId) {
    // Your implementation goes here
    printf("get_seg_bbox\n");
  }

  int32_t get_seg_id(const vector3d& point) {
    // Your implementation goes here
    printf("get_seg_id\n");
    return 0;
  }

  void get_seg_ids(std::vector<int32_t> & _return, const vector3d& point, const double radius) {
    // Your implementation goes here
    printf("get_seg_ids\n");
  }

  double compare_results(const std::vector<result> & old_results, const result& new_result) {
    // Your implementation goes here
    printf("compare_results\n");
    return 0;
  }

};

}
}
