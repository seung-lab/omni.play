/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef new_server_H
#define new_server_H

#include <TProcessor.h>
#include "server_types.h"

namespace om { namespace server {

class new_serverIf {
 public:
  virtual ~new_serverIf() {}
  virtual void get_chan_tile(tile& _return, const metadata& vol, const vector3d& point, const int32_t mipLevel, const viewType::type view) = 0;
  virtual void get_seg_tiles(std::vector<tile> & _return, const metadata& vol, const int32_t segId, const int32_t mipLevel, const viewType::type view) = 0;
  virtual int32_t get_seg_id(const metadata& vol, const vector3d& point) = 0;
  virtual void get_seg_ids(std::vector<int32_t> & _return, const metadata& vol, const vector3d& point, const double radius, const viewType::type view) = 0;
  virtual double compare_results(const std::vector<result> & old_results, const result& new_result) = 0;
};

class new_serverNull : virtual public new_serverIf {
 public:
  virtual ~new_serverNull() {}
  void get_chan_tile(tile& /* _return */, const metadata& /* vol */, const vector3d& /* point */, const int32_t /* mipLevel */, const viewType::type /* view */) {
    return;
  }
  void get_seg_tiles(std::vector<tile> & /* _return */, const metadata& /* vol */, const int32_t /* segId */, const int32_t /* mipLevel */, const viewType::type /* view */) {
    return;
  }
  int32_t get_seg_id(const metadata& /* vol */, const vector3d& /* point */) {
    int32_t _return = 0;
    return _return;
  }
  void get_seg_ids(std::vector<int32_t> & /* _return */, const metadata& /* vol */, const vector3d& /* point */, const double /* radius */, const viewType::type /* view */) {
    return;
  }
  double compare_results(const std::vector<result> & /* old_results */, const result& /* new_result */) {
    double _return = (double)0;
    return _return;
  }
};

typedef struct _new_server_get_chan_tile_args__isset {
  _new_server_get_chan_tile_args__isset() : vol(false), point(false), mipLevel(false), view(false) {}
  bool vol;
  bool point;
  bool mipLevel;
  bool view;
} _new_server_get_chan_tile_args__isset;

class new_server_get_chan_tile_args {
 public:

  new_server_get_chan_tile_args() : mipLevel(0) {
  }

  virtual ~new_server_get_chan_tile_args() throw() {}

  metadata vol;
  vector3d point;
  int32_t mipLevel;
  viewType::type view;

  _new_server_get_chan_tile_args__isset __isset;

  void __set_vol(const metadata& val) {
    vol = val;
  }

  void __set_point(const vector3d& val) {
    point = val;
  }

  void __set_mipLevel(const int32_t val) {
    mipLevel = val;
  }

  void __set_view(const viewType::type val) {
    view = val;
  }

  bool operator == (const new_server_get_chan_tile_args & rhs) const
  {
    if (!(vol == rhs.vol))
      return false;
    if (!(point == rhs.point))
      return false;
    if (!(mipLevel == rhs.mipLevel))
      return false;
    if (!(view == rhs.view))
      return false;
    return true;
  }
  bool operator != (const new_server_get_chan_tile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const new_server_get_chan_tile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class new_server_get_chan_tile_pargs {
 public:


  virtual ~new_server_get_chan_tile_pargs() throw() {}

  const metadata* vol;
  const vector3d* point;
  const int32_t* mipLevel;
  const viewType::type* view;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _new_server_get_chan_tile_result__isset {
  _new_server_get_chan_tile_result__isset() : success(false) {}
  bool success;
} _new_server_get_chan_tile_result__isset;

class new_server_get_chan_tile_result {
 public:

  new_server_get_chan_tile_result() {
  }

  virtual ~new_server_get_chan_tile_result() throw() {}

  tile success;

  _new_server_get_chan_tile_result__isset __isset;

  void __set_success(const tile& val) {
    success = val;
  }

  bool operator == (const new_server_get_chan_tile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const new_server_get_chan_tile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const new_server_get_chan_tile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _new_server_get_chan_tile_presult__isset {
  _new_server_get_chan_tile_presult__isset() : success(false) {}
  bool success;
} _new_server_get_chan_tile_presult__isset;

class new_server_get_chan_tile_presult {
 public:


  virtual ~new_server_get_chan_tile_presult() throw() {}

  tile* success;

  _new_server_get_chan_tile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _new_server_get_seg_tiles_args__isset {
  _new_server_get_seg_tiles_args__isset() : vol(false), segId(false), mipLevel(false), view(false) {}
  bool vol;
  bool segId;
  bool mipLevel;
  bool view;
} _new_server_get_seg_tiles_args__isset;

class new_server_get_seg_tiles_args {
 public:

  new_server_get_seg_tiles_args() : segId(0), mipLevel(0) {
  }

  virtual ~new_server_get_seg_tiles_args() throw() {}

  metadata vol;
  int32_t segId;
  int32_t mipLevel;
  viewType::type view;

  _new_server_get_seg_tiles_args__isset __isset;

  void __set_vol(const metadata& val) {
    vol = val;
  }

  void __set_segId(const int32_t val) {
    segId = val;
  }

  void __set_mipLevel(const int32_t val) {
    mipLevel = val;
  }

  void __set_view(const viewType::type val) {
    view = val;
  }

  bool operator == (const new_server_get_seg_tiles_args & rhs) const
  {
    if (!(vol == rhs.vol))
      return false;
    if (!(segId == rhs.segId))
      return false;
    if (!(mipLevel == rhs.mipLevel))
      return false;
    if (!(view == rhs.view))
      return false;
    return true;
  }
  bool operator != (const new_server_get_seg_tiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const new_server_get_seg_tiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class new_server_get_seg_tiles_pargs {
 public:


  virtual ~new_server_get_seg_tiles_pargs() throw() {}

  const metadata* vol;
  const int32_t* segId;
  const int32_t* mipLevel;
  const viewType::type* view;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _new_server_get_seg_tiles_result__isset {
  _new_server_get_seg_tiles_result__isset() : success(false) {}
  bool success;
} _new_server_get_seg_tiles_result__isset;

class new_server_get_seg_tiles_result {
 public:

  new_server_get_seg_tiles_result() {
  }

  virtual ~new_server_get_seg_tiles_result() throw() {}

  std::vector<tile>  success;

  _new_server_get_seg_tiles_result__isset __isset;

  void __set_success(const std::vector<tile> & val) {
    success = val;
  }

  bool operator == (const new_server_get_seg_tiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const new_server_get_seg_tiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const new_server_get_seg_tiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _new_server_get_seg_tiles_presult__isset {
  _new_server_get_seg_tiles_presult__isset() : success(false) {}
  bool success;
} _new_server_get_seg_tiles_presult__isset;

class new_server_get_seg_tiles_presult {
 public:


  virtual ~new_server_get_seg_tiles_presult() throw() {}

  std::vector<tile> * success;

  _new_server_get_seg_tiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _new_server_get_seg_id_args__isset {
  _new_server_get_seg_id_args__isset() : vol(false), point(false) {}
  bool vol;
  bool point;
} _new_server_get_seg_id_args__isset;

class new_server_get_seg_id_args {
 public:

  new_server_get_seg_id_args() {
  }

  virtual ~new_server_get_seg_id_args() throw() {}

  metadata vol;
  vector3d point;

  _new_server_get_seg_id_args__isset __isset;

  void __set_vol(const metadata& val) {
    vol = val;
  }

  void __set_point(const vector3d& val) {
    point = val;
  }

  bool operator == (const new_server_get_seg_id_args & rhs) const
  {
    if (!(vol == rhs.vol))
      return false;
    if (!(point == rhs.point))
      return false;
    return true;
  }
  bool operator != (const new_server_get_seg_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const new_server_get_seg_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class new_server_get_seg_id_pargs {
 public:


  virtual ~new_server_get_seg_id_pargs() throw() {}

  const metadata* vol;
  const vector3d* point;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _new_server_get_seg_id_result__isset {
  _new_server_get_seg_id_result__isset() : success(false) {}
  bool success;
} _new_server_get_seg_id_result__isset;

class new_server_get_seg_id_result {
 public:

  new_server_get_seg_id_result() : success(0) {
  }

  virtual ~new_server_get_seg_id_result() throw() {}

  int32_t success;

  _new_server_get_seg_id_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const new_server_get_seg_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const new_server_get_seg_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const new_server_get_seg_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _new_server_get_seg_id_presult__isset {
  _new_server_get_seg_id_presult__isset() : success(false) {}
  bool success;
} _new_server_get_seg_id_presult__isset;

class new_server_get_seg_id_presult {
 public:


  virtual ~new_server_get_seg_id_presult() throw() {}

  int32_t* success;

  _new_server_get_seg_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _new_server_get_seg_ids_args__isset {
  _new_server_get_seg_ids_args__isset() : vol(false), point(false), radius(false), view(false) {}
  bool vol;
  bool point;
  bool radius;
  bool view;
} _new_server_get_seg_ids_args__isset;

class new_server_get_seg_ids_args {
 public:

  new_server_get_seg_ids_args() : radius(0) {
  }

  virtual ~new_server_get_seg_ids_args() throw() {}

  metadata vol;
  vector3d point;
  double radius;
  viewType::type view;

  _new_server_get_seg_ids_args__isset __isset;

  void __set_vol(const metadata& val) {
    vol = val;
  }

  void __set_point(const vector3d& val) {
    point = val;
  }

  void __set_radius(const double val) {
    radius = val;
  }

  void __set_view(const viewType::type val) {
    view = val;
  }

  bool operator == (const new_server_get_seg_ids_args & rhs) const
  {
    if (!(vol == rhs.vol))
      return false;
    if (!(point == rhs.point))
      return false;
    if (!(radius == rhs.radius))
      return false;
    if (!(view == rhs.view))
      return false;
    return true;
  }
  bool operator != (const new_server_get_seg_ids_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const new_server_get_seg_ids_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class new_server_get_seg_ids_pargs {
 public:


  virtual ~new_server_get_seg_ids_pargs() throw() {}

  const metadata* vol;
  const vector3d* point;
  const double* radius;
  const viewType::type* view;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _new_server_get_seg_ids_result__isset {
  _new_server_get_seg_ids_result__isset() : success(false) {}
  bool success;
} _new_server_get_seg_ids_result__isset;

class new_server_get_seg_ids_result {
 public:

  new_server_get_seg_ids_result() {
  }

  virtual ~new_server_get_seg_ids_result() throw() {}

  std::vector<int32_t>  success;

  _new_server_get_seg_ids_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val) {
    success = val;
  }

  bool operator == (const new_server_get_seg_ids_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const new_server_get_seg_ids_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const new_server_get_seg_ids_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _new_server_get_seg_ids_presult__isset {
  _new_server_get_seg_ids_presult__isset() : success(false) {}
  bool success;
} _new_server_get_seg_ids_presult__isset;

class new_server_get_seg_ids_presult {
 public:


  virtual ~new_server_get_seg_ids_presult() throw() {}

  std::vector<int32_t> * success;

  _new_server_get_seg_ids_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _new_server_compare_results_args__isset {
  _new_server_compare_results_args__isset() : old_results(false), new_result(false) {}
  bool old_results;
  bool new_result;
} _new_server_compare_results_args__isset;

class new_server_compare_results_args {
 public:

  new_server_compare_results_args() {
  }

  virtual ~new_server_compare_results_args() throw() {}

  std::vector<result>  old_results;
  result new_result;

  _new_server_compare_results_args__isset __isset;

  void __set_old_results(const std::vector<result> & val) {
    old_results = val;
  }

  void __set_new_result(const result& val) {
    new_result = val;
  }

  bool operator == (const new_server_compare_results_args & rhs) const
  {
    if (!(old_results == rhs.old_results))
      return false;
    if (!(new_result == rhs.new_result))
      return false;
    return true;
  }
  bool operator != (const new_server_compare_results_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const new_server_compare_results_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class new_server_compare_results_pargs {
 public:


  virtual ~new_server_compare_results_pargs() throw() {}

  const std::vector<result> * old_results;
  const result* new_result;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _new_server_compare_results_result__isset {
  _new_server_compare_results_result__isset() : success(false) {}
  bool success;
} _new_server_compare_results_result__isset;

class new_server_compare_results_result {
 public:

  new_server_compare_results_result() : success(0) {
  }

  virtual ~new_server_compare_results_result() throw() {}

  double success;

  _new_server_compare_results_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const new_server_compare_results_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const new_server_compare_results_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const new_server_compare_results_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _new_server_compare_results_presult__isset {
  _new_server_compare_results_presult__isset() : success(false) {}
  bool success;
} _new_server_compare_results_presult__isset;

class new_server_compare_results_presult {
 public:


  virtual ~new_server_compare_results_presult() throw() {}

  double* success;

  _new_server_compare_results_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class new_serverClient : virtual public new_serverIf {
 public:
  new_serverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  new_serverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_chan_tile(tile& _return, const metadata& vol, const vector3d& point, const int32_t mipLevel, const viewType::type view);
  void send_get_chan_tile(const metadata& vol, const vector3d& point, const int32_t mipLevel, const viewType::type view);
  void recv_get_chan_tile(tile& _return);
  void get_seg_tiles(std::vector<tile> & _return, const metadata& vol, const int32_t segId, const int32_t mipLevel, const viewType::type view);
  void send_get_seg_tiles(const metadata& vol, const int32_t segId, const int32_t mipLevel, const viewType::type view);
  void recv_get_seg_tiles(std::vector<tile> & _return);
  int32_t get_seg_id(const metadata& vol, const vector3d& point);
  void send_get_seg_id(const metadata& vol, const vector3d& point);
  int32_t recv_get_seg_id();
  void get_seg_ids(std::vector<int32_t> & _return, const metadata& vol, const vector3d& point, const double radius, const viewType::type view);
  void send_get_seg_ids(const metadata& vol, const vector3d& point, const double radius, const viewType::type view);
  void recv_get_seg_ids(std::vector<int32_t> & _return);
  double compare_results(const std::vector<result> & old_results, const result& new_result);
  void send_compare_results(const std::vector<result> & old_results, const result& new_result);
  double recv_compare_results();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class new_serverProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<new_serverIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (new_serverProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_get_chan_tile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_seg_tiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_seg_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_seg_ids(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_compare_results(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  new_serverProcessor(boost::shared_ptr<new_serverIf> iface) :
    iface_(iface) {
    processMap_["get_chan_tile"] = &new_serverProcessor::process_get_chan_tile;
    processMap_["get_seg_tiles"] = &new_serverProcessor::process_get_seg_tiles;
    processMap_["get_seg_id"] = &new_serverProcessor::process_get_seg_id;
    processMap_["get_seg_ids"] = &new_serverProcessor::process_get_seg_ids;
    processMap_["compare_results"] = &new_serverProcessor::process_compare_results;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~new_serverProcessor() {}
};

class new_serverMultiface : virtual public new_serverIf {
 public:
  new_serverMultiface(std::vector<boost::shared_ptr<new_serverIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~new_serverMultiface() {}
 protected:
  std::vector<boost::shared_ptr<new_serverIf> > ifaces_;
  new_serverMultiface() {}
  void add(boost::shared_ptr<new_serverIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_chan_tile(tile& _return, const metadata& vol, const vector3d& point, const int32_t mipLevel, const viewType::type view) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_chan_tile(_return, vol, point, mipLevel, view);
        return;
      } else {
        ifaces_[i]->get_chan_tile(_return, vol, point, mipLevel, view);
      }
    }
  }

  void get_seg_tiles(std::vector<tile> & _return, const metadata& vol, const int32_t segId, const int32_t mipLevel, const viewType::type view) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_seg_tiles(_return, vol, segId, mipLevel, view);
        return;
      } else {
        ifaces_[i]->get_seg_tiles(_return, vol, segId, mipLevel, view);
      }
    }
  }

  int32_t get_seg_id(const metadata& vol, const vector3d& point) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->get_seg_id(vol, point);
      } else {
        ifaces_[i]->get_seg_id(vol, point);
      }
    }
  }

  void get_seg_ids(std::vector<int32_t> & _return, const metadata& vol, const vector3d& point, const double radius, const viewType::type view) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_seg_ids(_return, vol, point, radius, view);
        return;
      } else {
        ifaces_[i]->get_seg_ids(_return, vol, point, radius, view);
      }
    }
  }

  double compare_results(const std::vector<result> & old_results, const result& new_result) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->compare_results(old_results, new_result);
      } else {
        ifaces_[i]->compare_results(old_results, new_result);
      }
    }
  }

};

}} // namespace

#endif
