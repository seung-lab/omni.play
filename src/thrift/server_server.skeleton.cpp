// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "server.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace om::server;

class serverHandler : virtual public serverIf {
 public:
  serverHandler() {
    // Your initialization goes here
  }

  void get_chan_tile(tile& _return, const metadata& vol, const vector3d& point, const viewType::type view) {
    // Your implementation goes here
    printf("get_chan_tile\n");
  }

  void get_seg_tiles(std::map<std::string, tile> & _return, const metadata& vol, const int32_t segId, const bbox& segBbox, const viewType::type view) {
    // Your implementation goes here
    printf("get_seg_tiles\n");
  }

  int32_t get_seg_id(const metadata& vol, const vector3d& point) {
    // Your implementation goes here
    printf("get_seg_id\n");
  }

  void get_seg_ids(std::vector<int32_t> & _return, const metadata& vol, const vector3d& point, const double radius, const viewType::type view) {
    // Your implementation goes here
    printf("get_seg_ids\n");
  }

  void get_mesh(std::string& _return, const std::string& uri, const vector3i& chunk, const int32_t segId) {
    // Your implementation goes here
    printf("get_mesh\n");
  }

  double compare_results(const std::vector<result> & old_results, const result& new_result) {
    // Your implementation goes here
    printf("compare_results\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<serverHandler> handler(new serverHandler());
  shared_ptr<TProcessor> processor(new serverProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

