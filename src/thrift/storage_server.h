/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef storage_server_H
#define storage_server_H

#include <TProcessor.h>
#include "filesystem_types.h"

namespace bint {

class storage_serverIf {
 public:
  virtual ~storage_serverIf() {}
  virtual void get(std::string& _return, const std::string& key) = 0;
  virtual bool put(const std::string& key, const std::string& value) = 0;
  virtual void get_stats(std::map<std::string, int64_t> & _return) = 0;
};

class storage_serverNull : virtual public storage_serverIf {
 public:
  virtual ~storage_serverNull() {}
  void get(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
  bool put(const std::string& /* key */, const std::string& /* value */) {
    bool _return = false;
    return _return;
  }
  void get_stats(std::map<std::string, int64_t> & /* _return */) {
    return;
  }
};

typedef struct _storage_server_get_args__isset {
  _storage_server_get_args__isset() : key(false) {}
  bool key;
} _storage_server_get_args__isset;

class storage_server_get_args {
 public:

  storage_server_get_args() : key("") {
  }

  virtual ~storage_server_get_args() throw() {}

  std::string key;

  _storage_server_get_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const storage_server_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const storage_server_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_server_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class storage_server_get_pargs {
 public:


  virtual ~storage_server_get_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _storage_server_get_result__isset {
  _storage_server_get_result__isset() : success(false) {}
  bool success;
} _storage_server_get_result__isset;

class storage_server_get_result {
 public:

  storage_server_get_result() : success("") {
  }

  virtual ~storage_server_get_result() throw() {}

  std::string success;

  _storage_server_get_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const storage_server_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const storage_server_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_server_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _storage_server_get_presult__isset {
  _storage_server_get_presult__isset() : success(false) {}
  bool success;
} _storage_server_get_presult__isset;

class storage_server_get_presult {
 public:


  virtual ~storage_server_get_presult() throw() {}

  std::string* success;

  _storage_server_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _storage_server_put_args__isset {
  _storage_server_put_args__isset() : key(false), value(false) {}
  bool key;
  bool value;
} _storage_server_put_args__isset;

class storage_server_put_args {
 public:

  storage_server_put_args() : key(""), value("") {
  }

  virtual ~storage_server_put_args() throw() {}

  std::string key;
  std::string value;

  _storage_server_put_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const storage_server_put_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const storage_server_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_server_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class storage_server_put_pargs {
 public:


  virtual ~storage_server_put_pargs() throw() {}

  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _storage_server_put_result__isset {
  _storage_server_put_result__isset() : success(false) {}
  bool success;
} _storage_server_put_result__isset;

class storage_server_put_result {
 public:

  storage_server_put_result() : success(0) {
  }

  virtual ~storage_server_put_result() throw() {}

  bool success;

  _storage_server_put_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const storage_server_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const storage_server_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_server_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _storage_server_put_presult__isset {
  _storage_server_put_presult__isset() : success(false) {}
  bool success;
} _storage_server_put_presult__isset;

class storage_server_put_presult {
 public:


  virtual ~storage_server_put_presult() throw() {}

  bool* success;

  _storage_server_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class storage_server_get_stats_args {
 public:

  storage_server_get_stats_args() {
  }

  virtual ~storage_server_get_stats_args() throw() {}


  bool operator == (const storage_server_get_stats_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const storage_server_get_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_server_get_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class storage_server_get_stats_pargs {
 public:


  virtual ~storage_server_get_stats_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _storage_server_get_stats_result__isset {
  _storage_server_get_stats_result__isset() : success(false) {}
  bool success;
} _storage_server_get_stats_result__isset;

class storage_server_get_stats_result {
 public:

  storage_server_get_stats_result() {
  }

  virtual ~storage_server_get_stats_result() throw() {}

  std::map<std::string, int64_t>  success;

  _storage_server_get_stats_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val) {
    success = val;
  }

  bool operator == (const storage_server_get_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const storage_server_get_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_server_get_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _storage_server_get_stats_presult__isset {
  _storage_server_get_stats_presult__isset() : success(false) {}
  bool success;
} _storage_server_get_stats_presult__isset;

class storage_server_get_stats_presult {
 public:


  virtual ~storage_server_get_stats_presult() throw() {}

  std::map<std::string, int64_t> * success;

  _storage_server_get_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class storage_serverClient : virtual public storage_serverIf {
 public:
  storage_serverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  storage_serverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(std::string& _return, const std::string& key);
  void send_get(const std::string& key);
  void recv_get(std::string& _return);
  bool put(const std::string& key, const std::string& value);
  void send_put(const std::string& key, const std::string& value);
  bool recv_put();
  void get_stats(std::map<std::string, int64_t> & _return);
  void send_get_stats();
  void recv_get_stats(std::map<std::string, int64_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class storage_serverProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<storage_serverIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (storage_serverProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  storage_serverProcessor(boost::shared_ptr<storage_serverIf> iface) :
    iface_(iface) {
    processMap_["get"] = &storage_serverProcessor::process_get;
    processMap_["put"] = &storage_serverProcessor::process_put;
    processMap_["get_stats"] = &storage_serverProcessor::process_get_stats;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~storage_serverProcessor() {}
};

class storage_serverMultiface : virtual public storage_serverIf {
 public:
  storage_serverMultiface(std::vector<boost::shared_ptr<storage_serverIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~storage_serverMultiface() {}
 protected:
  std::vector<boost::shared_ptr<storage_serverIf> > ifaces_;
  storage_serverMultiface() {}
  void add(boost::shared_ptr<storage_serverIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(std::string& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get(_return, key);
        return;
      } else {
        ifaces_[i]->get(_return, key);
      }
    }
  }

  bool put(const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->put(key, value);
      } else {
        ifaces_[i]->put(key, value);
      }
    }
  }

  void get_stats(std::map<std::string, int64_t> & _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_stats(_return);
        return;
      } else {
        ifaces_[i]->get_stats(_return);
      }
    }
  }

};

} // namespace

#endif
