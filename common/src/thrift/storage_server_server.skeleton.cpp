// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "storage_server.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace om::server;

class storage_serverHandler : virtual public storage_serverIf {
 public:
  storage_serverHandler() {
    // Your initialization goes here
  }

  void get(std::string& _return, const std::string& key) {
    // Your implementation goes here
    printf("get\n");
  }

  bool put(const std::string& key, const std::string& value) {
    // Your implementation goes here
    printf("put\n");
  }

  void get_stats(std::map<std::string, int64_t> & _return) {
    // Your implementation goes here
    printf("get_stats\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<storage_serverHandler> handler(new storage_serverHandler());
  shared_ptr<TProcessor> processor(new storage_serverProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

