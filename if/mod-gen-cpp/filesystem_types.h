/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef filesystem_TYPES_H
#define filesystem_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace bint {

typedef struct _server_id__isset {
  _server_id__isset() : address(false), port(false) {}
  bool address;
  bool port;
} _server_id__isset;

class server_id {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  server_id() : address(""), port(0) {
  }

  virtual ~server_id() throw() {}

  std::string address;
  int32_t port;

  _server_id__isset __isset;

  void __set_address(const std::string& val) {
    address = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  bool operator == (const server_id & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const server_id &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const server_id &other ) const {
      if (address == other.address )
          return port < other.port;
      return address < other.address;
  }

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
