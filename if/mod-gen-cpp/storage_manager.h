/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef storage_manager_H
#define storage_manager_H

#include <TProcessor.h>
#include "filesystem_types.h"

namespace bint {

class storage_managerIf {
 public:
  virtual ~storage_managerIf() {}
  virtual void get_server(server_id& _return, const std::string& key) = 0;
  virtual bool register_server(const server_id& id) = 0;
};

class storage_managerNull : virtual public storage_managerIf {
 public:
  virtual ~storage_managerNull() {}
  void get_server(server_id& /* _return */, const std::string& /* key */) {
    return;
  }
  bool register_server(const server_id& /* id */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _storage_manager_get_server_args__isset {
  _storage_manager_get_server_args__isset() : key(false) {}
  bool key;
} _storage_manager_get_server_args__isset;

class storage_manager_get_server_args {
 public:

  storage_manager_get_server_args() : key("") {
  }

  virtual ~storage_manager_get_server_args() throw() {}

  std::string key;

  _storage_manager_get_server_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const storage_manager_get_server_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const storage_manager_get_server_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_manager_get_server_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class storage_manager_get_server_pargs {
 public:


  virtual ~storage_manager_get_server_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _storage_manager_get_server_result__isset {
  _storage_manager_get_server_result__isset() : success(false) {}
  bool success;
} _storage_manager_get_server_result__isset;

class storage_manager_get_server_result {
 public:

  storage_manager_get_server_result() {
  }

  virtual ~storage_manager_get_server_result() throw() {}

  server_id success;

  _storage_manager_get_server_result__isset __isset;

  void __set_success(const server_id& val) {
    success = val;
  }

  bool operator == (const storage_manager_get_server_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const storage_manager_get_server_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_manager_get_server_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _storage_manager_get_server_presult__isset {
  _storage_manager_get_server_presult__isset() : success(false) {}
  bool success;
} _storage_manager_get_server_presult__isset;

class storage_manager_get_server_presult {
 public:


  virtual ~storage_manager_get_server_presult() throw() {}

  server_id* success;

  _storage_manager_get_server_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _storage_manager_register_server_args__isset {
  _storage_manager_register_server_args__isset() : id(false) {}
  bool id;
} _storage_manager_register_server_args__isset;

class storage_manager_register_server_args {
 public:

  storage_manager_register_server_args() {
  }

  virtual ~storage_manager_register_server_args() throw() {}

  server_id id;

  _storage_manager_register_server_args__isset __isset;

  void __set_id(const server_id& val) {
    id = val;
  }

  bool operator == (const storage_manager_register_server_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const storage_manager_register_server_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_manager_register_server_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class storage_manager_register_server_pargs {
 public:


  virtual ~storage_manager_register_server_pargs() throw() {}

  const server_id* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _storage_manager_register_server_result__isset {
  _storage_manager_register_server_result__isset() : success(false) {}
  bool success;
} _storage_manager_register_server_result__isset;

class storage_manager_register_server_result {
 public:

  storage_manager_register_server_result() : success(0) {
  }

  virtual ~storage_manager_register_server_result() throw() {}

  bool success;

  _storage_manager_register_server_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const storage_manager_register_server_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const storage_manager_register_server_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_manager_register_server_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _storage_manager_register_server_presult__isset {
  _storage_manager_register_server_presult__isset() : success(false) {}
  bool success;
} _storage_manager_register_server_presult__isset;

class storage_manager_register_server_presult {
 public:


  virtual ~storage_manager_register_server_presult() throw() {}

  bool* success;

  _storage_manager_register_server_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class storage_managerClient : virtual public storage_managerIf {
 public:
  storage_managerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  storage_managerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_server(server_id& _return, const std::string& key);
  void send_get_server(const std::string& key);
  void recv_get_server(server_id& _return);
  bool register_server(const server_id& id);
  void send_register_server(const server_id& id);
  bool recv_register_server();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class storage_managerProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<storage_managerIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (storage_managerProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_get_server(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_register_server(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  storage_managerProcessor(boost::shared_ptr<storage_managerIf> iface) :
    iface_(iface) {
    processMap_["get_server"] = &storage_managerProcessor::process_get_server;
    processMap_["register_server"] = &storage_managerProcessor::process_register_server;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~storage_managerProcessor() {}
};

class storage_managerMultiface : virtual public storage_managerIf {
 public:
  storage_managerMultiface(std::vector<boost::shared_ptr<storage_managerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~storage_managerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<storage_managerIf> > ifaces_;
  storage_managerMultiface() {}
  void add(boost::shared_ptr<storage_managerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_server(server_id& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_server(_return, key);
        return;
      } else {
        ifaces_[i]->get_server(_return, key);
      }
    }
  }

  bool register_server(const server_id& id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->register_server(id);
      } else {
        ifaces_[i]->register_server(id);
      }
    }
  }

};

} // namespace

#endif
