// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "../../storage_server.hpp"
#include "storage_server.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
//nclude <boost/program_options.hpp>

#include <zi/system.hpp>
#include <zi/arguments.hpp>
#include <iostream>
#include <cstddef>


ZiARG_string(id, "", "Server's ID");
ZiARG_uint64(size, 1000, "Size");
ZiARG_string(manager, "localhost", "Manager's IP");
ZiARG_int32(port, 9090, "Manager's port");

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

//using namespace bint;

class storage_serverHandler : virtual public bint::storage_serverIf {

private:
    storage_server<std::string,char> server_;


public:
    storage_serverHandler(std::string id, size_t size, std::string manager, int port)
        : server_(id,size) //initialize storage_server

    {
        // Your initialization goes here


        //register with storage manager service

    }

    void get(std::string& _return, const std::string& key) {
        // Your implementation goes here
        printf("get\n");
    }

    bool put(const std::string& key, const std::string& value) {
        // Your implementation goes here
        printf("put\n");
        //TODO need to include size
    }

};

int main(int argc, char **argv) {

    zi::parse_arguments(argc, argv, true);

//     //take care of program options
//     // po::variables_map vm;
//     // int manager_port;
//     // std::size_t size;
//     // std::string id;
//     // std::string manager_addr;

//     // try {

//     //     po::options_description desc("Allowed options");
//     //     desc.add_options()
//     //         ("help", "produce help message")
//     //         ("id", po::value<std::string>(), "set the server id (ideally a unique number)")
//     //         ("size", po::value<std::size_t>(&size), "set the file mapping size")
//     //         ("manager_addr", po::value<std::string>(), "the address of the storage_manager")
//     //         ("manager_port", po::value<int>(&manager_port)->default_value(9090), "the port of the address manager")
//     //         ;


//     //     po::store(po::parse_command_line(argc, argv, desc), vm);
//     //     po::notify(vm);

//     //     if (vm.count("help")) {
//     //         std::cout << desc << "\n";
//     //         return 1;
//     //     }

//     //     if (vm.count("id") == 0){
//     //         std::cout << "must include id\n";
//     //         return 1;
//     //     }if (vm.count("size") == 0){
//     //         std::cout << "must include size\n";
//     //         return 1;
//     //     }if (vm.count("manager_addr") == 0){
//     //         std::cout << "must include manager address\n";
//     //         return 1;
//     //     }


//     // }
//     // catch(std::exception& e) {
//     //     std::cerr << "error: " << e.what() << "\n";
//     //     return 1;
//     // }
//     // catch(...) {
//     //     std::cerr << "Exception of unknown type!\n";
//     // }

//     // id = vm["id"].as<std::string>();
//     // manager_addr = vm["manager_addr"].as<std::string>();

    std::cout << zi::system::get_hostname() << ".local \n";

    int port = 9090;
    ::boost::shared_ptr<storage_serverHandler> handler
          (new storage_serverHandler(ZiARG_id, ZiARG_size, ZiARG_manager, ZiARG_port));
    ::boost::shared_ptr<TProcessor> processor(new bint::storage_serverProcessor(handler));
    ::boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}


//int main() {}
