// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "storage_server.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include <map>
#include <utility>
#include <iostream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace bint;

class storage_serverHandler : virtual public storage_serverIf {
private:
    std::map<std::string,std::string> map_;

 public:
  storage_serverHandler() {
      // Your initialization goes here
  }

    void get(std::string& _return, const std::string& key)
    {
        // Your implementation goes here
        // printf("get\n");
        _return = map_[key];
        std::cout << "GET: " << key << " => " << _return << "\n";
    }

  bool put(const std::string& key, const std::string& value) {
      // Your implementation goes here
      //printf("put\n");
      map_[key] = value;
      std::cout << "PUT: " << key << " => " << value << "\n";
      return true;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<storage_serverHandler> handler(new storage_serverHandler());
  shared_ptr<TProcessor> processor(new storage_serverProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

