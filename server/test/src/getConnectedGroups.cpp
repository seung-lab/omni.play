#include "handler/handler.h"
#include "gtest/gtest.h"
#include "gmock/gmock.h"

#include "datalayer/paths.hpp"
#include "volume/segmentation.h"

using ::testing::_;
using namespace ::zi::mesh;

namespace om {
namespace test {

const server::group& get(const std::vector<server::group>& groups,
                         om::server::groupType::type type, int uid = 0,
                         bool dust = false, int nth = 1) {
  auto iter = groups.begin();
  for (int i = 0; i < nth; ++i) {
    if (i > 0) {
      ++iter;
    }
    iter = std::find_if(iter, groups.end(),
                        [type, uid, dust](const server::group& g) {
      return g.type == type && (g.user_id == uid || uid == 0) && g.dust == dust;
    });
  }

  EXPECT_TRUE(iter != groups.end());
  return *iter;
}

TEST(GetConnectedGroupsTest, Simple) {
  file::Paths p("/omniData/e2198/e2198_a_s10_101_46_e17_116_61.omni");
  volume::Segmentation vol(p, 1);

  std::unordered_map<int, common::SegIDSet> groups;
  groups[2].insert({1, 2, 3, 4, 5, 6, 7});
  groups[3].insert({1, 3, 5, 7, 9, 11});
  groups[4].insert({1, 3});

  // Groups:
  //  ALL:      1, 2, 3, 4, 5, 6, 7, 9, 11
  //  AGREED:   1, 3
  //  2 FOUND:  2, 4, 6
  //  3 FOUND:  9, 11
  //  4 MISSED: 5, 7

  std::vector<server::group> _return;
  handler::get_connected_groups(_return, vol, groups);

  EXPECT_EQ(10, _return.size());
  auto all = get(_return, om::server::groupType::ALL);
  EXPECT_EQ(9, all.segments.size());

  auto agreed = get(_return, om::server::groupType::AGREED);
  EXPECT_EQ(2, agreed.segments.size());

  auto two = get(_return, server::groupType::USER_FOUND, 2);
  EXPECT_EQ(1, two.segments.size());

  auto three = get(_return, server::groupType::USER_FOUND, 3);
  EXPECT_EQ(2, three.segments.size());

  auto four = get(_return, server::groupType::USER_MISSED, 4);
  EXPECT_EQ(2, four.segments.size());
}

// There are some segments at the edge of the volume here.
TEST(GetConnectedGroupsTest, TestOutOfBounds) {
  file::Paths p("/omniData/piriform-2x2x2/piriform_17000-19047_13000-15047_484-739.omni");
  volume::Segmentation vol(p, 1);

  std::unordered_map<int, common::SegIDSet> groups;
  groups[200107].insert({
      11471, 11808, 16411, 17423, 18532, 20632, 21035, 22743, 24055,
      25116, 25856, 27906, 28885, 29649, 31933, 33867, 35891, 37380,
      37383, 38705, 39772, 40178, 42212, 43926, 45461, 45788, 47188,
      47196, 47523, 49793, 51257, 51557, 52491, 60371, 61768, 62502,
      63925, 65399, 68084, 68794, 74398, 75654, 76555, 76964, 77697,
      79777, 80718, 83477, 84295
      });

  groups[209907].insert({
      11471, 11808, 16411, 17423, 18532, 20632, 21035, 22743, 24055,
      25116, 25856, 27906, 28885, 29649, 31933, 33867, 35891, 37380,
      37383, 38705, 39013, 39772, 40178, 42212, 43926, 45461, 45788,
      47188, 47196, 47523, 49793, 51257, 51557, 52491, 60371, 61768,
      62502, 63925, 65399, 68084, 68794, 76555, 78079, 80484, 82343, 83087, 84306
      });

  std::vector<server::group> _return;
  handler::get_connected_groups(_return, vol, groups);

  EXPECT_EQ(7, _return.size());
  auto all = get(_return, om::server::groupType::ALL);
  EXPECT_EQ(55, all.segments.size());
}

// Taken from task 302962
TEST(GetConnectedGroupsTest, Full) {
  file::Paths p("/omniData/e2198/e2198_cp_s8_116_91_e16_131_98.omni");
  volume::Segmentation vol(p, 1);

  std::unordered_map<int, common::SegIDSet> groups;
  groups[102796].insert(
      {109999, 179377, 117792, 117562, 73891,  73881,  140004, 73746,  102633,
       102577, 85601,  123638, 148014, 363457, 147914, 43707,  223940, 180300,
       30042,  86484,  86303,  261580, 72969,  72833,  93337,  93262,  51651,
       170672, 84782,  90614,  90611,  90586,  81294,  153608, 81215,  60586,
       46917,  196303, 36628,  56579,  246103, 112519, 99431,  83808,  99350,
       99279,  103591, 381207, 310269, 48513,  34103,  228993, 67405,  333685,
       98417,  117567, 86483,  158058, 369794, 229882, 37419,  36601,  268504,
       261858, 87215,  234166, 67404,  208498, 381203, 98584,  376850, 111000,
       375022, 82890,  75544,  75510,  108310, 89013,  93192,  255174, 318695,
       90605,  232528, 69746,  304436, 383107, 89781,  383092, 121805, 37422,
       90592,  67279,  232421, 74798,  126140, 91514,  163353, 81379,  265838,
       33365,  272919, 370670, 231569, 114173, 100267, 166934, 161454, 225532,
       268505, 197748, 26903,  87399,  133876, 55868,  101728, 186502, 228158,
       34133,  194291, 360804, 100271, 26905,  191583, 313465, 73879,  89012,
       87221,  121798, 100268, 85393,  271060, 101711, 68990,  87210,  158057,
       34130,  99264,  197833, 78814,  87403,  66508,  161323, 260904, 68040,
       237074, 151593, 87380,  75519,  88852,  68167,  229006, 126141, 87286,
       270109, 2653,   68861,  102576, 69856,  372435, 367118, 61545,  171566,
       89777,  151681, 82956,  121811, 179412, 26855,  75526,  83937,  56534,
       71258,  95896,  273802, 95829,  79608,  94931,  379507, 134076, 69863,
       254887, 165065, 201385, 274816, 94939,  72035,  77947,  377784, 197006,
       176900, 197759, 70540,  177698, 99432,  101068, 127917, 91516,  73765,
       91352,  68039,  94215,  66604,  78874,  91411,  41266,  41290,  83752,
       208497, 96868,  93187,  93190,  90612,  76297,  85391,  76393,  224648,
       72051,  90597,  89779,  173215, 296324, 368050, 90608,  67295,  69749,
       95876,  70518,  244160, 106736, 70523,  83790,  41254,  383996, 120079,
       66500,  145348, 31719,  182199, 105186, 228294, 105185, 105192, 97772,
       195184, 96021,  195408, 105991, 231554, 63140,  63151,  30921,  375853,
       40473,  88233,  87398,  383105, 32592,  82899,  82955,  169663, 99278,
       88235,  82918,  88854,  95926,  69750,  88861,  68169,  122566, 92300,
       303260, 89776,  227202, 89778,  94928,  102730, 94959,  96739});

  groups[118156].insert(
      {147914, 75526,  75510,  46917,  92300,  30921,  161323, 94959,  79608,
       94931,  94928,  72833,  102577, 93190,  86303,  383996, 376850, 43707,
       375022, 195184, 82955,  99278,  102576, 367118, 99264,  33365,  370670,
       182199, 274816, 83808,  31719,  194291, 88852,  32592,  68861,  37419,
       67295,  93192,  101728, 375853, 197748, 73765,  26903,  66500,  381207,
       91352,  83790,  34103,  96739,  369794, 191583, 34133,  296324, 381203,
       93187,  377784, 37422,  78814,  133876, 63151,  70523,  73746,  66508,
       34130,  26855,  56534,  70518,  82956,  108310, 60586,  272919, 109999,
       94939,  71258,  273802, 99279,  95896,  383092, 67279,  360804, 355480,
       2653,   270109, 383105, 383107, 30042,  48513,  36628,  101711, 271060,
       68039,  95876,  379507, 122566, 68040,  69746,  368050, 69749,  87210,
       313465, 26905,  254887, 70540,  261580, 41254,  41290,  69750,  88854,
       88861,  87215,  87221,  363457, 303260});

  std::vector<server::group> _return;
  handler::get_connected_groups(_return, vol, groups);

  common::SegIDSet agreed = {
      2653,   383996, 383107, 383105, 383092, 381207, 381203, 379507, 377784,
      376850, 375853, 375022, 370670, 369794, 368050, 367118, 363457, 360804,
      313465, 303260, 296324, 274816, 273802, 272919, 271060, 270109, 261580,
      254887, 197748, 195184, 194291, 191583, 182199, 161323, 147914, 133876,
      122566, 109999, 108310, 102577, 102576, 101728, 101711, 99279,  99278,
      99264,  96739,  95896,  95876,  94959,  94939,  94931,  94928,  93192,
      93190,  93187,  92300,  91352,  88861,  88854,  88852,  87221,  87215,
      87210,  86303,  83808,  83790,  82956,  82955,  79608,  78814,  75526,
      75510,  73765,  73746,  72833,  71258,  70540,  70523,  70518,  69750,
      69749,  69746,  68861,  68040,  68039,  67295,  67279,  66508,  66500,
      63151,  60586,  56534,  48513,  46917,  43707,  41290,  41254,  37422,
      37419,  36628,  34133,  34130,  34103,  33365,  32592,  31719,  30921,
      30042,  26905,  26903,  26855};

  common::SegIDSet group1 = {
      40473, 120079, 117567, 117562, 112519, 98417, 85393, 85391, 95829, 81215,
      83752, 82890,  51651,  82918,  72035,  75519, 63140, 82899, 41266};
  common::SegIDSet group2 = {
      55868,  66604,  67404,  67405,  68167,  68169,  68990,  69856,  69863,
      72969,  73879,  73881,  73891,  74798,  75544,  76297,  76393,  77947,
      78874,  81294,  81379,  83937,  84782,  85601,  86483,  86484,  87286,
      87380,  87398,  87399,  87403,  88233,  88235,  89012,  89013,  89776,
      89777,  89778,  89779,  89781,  90586,  90592,  90597,  90605,  90608,
      90611,  90612,  90614,  91411,  91514,  91516,  93262,  93337,  94215,
      95926,  96021,  96868,  97772,  98584,  99350,  99431,  99432,  100267,
      100268, 100271, 101068, 102633, 102730, 103591, 105185, 105186, 105192,
      105991, 106736, 111000, 114173, 117792, 121798, 121805, 121811, 123638,
      126140, 126141, 127917, 134076, 140004, 145348, 148014, 151593, 151681,
      153608, 158057, 158058, 161454, 163353, 165065, 166934, 169663, 170672,
      171566, 173215, 176900, 177698, 179377, 179412, 180300, 186502, 195408,
      196303, 197006, 197833, 201385, 208497, 208498, 223940, 224648, 225532,
      227202, 228158, 228294, 228993, 229006, 229882, 231554, 231569, 232421,
      232528, 234166, 237074, 244160, 246103, 255174, 260904, 261858, 265838,
      268504, 268505, 304436, 310269, 318695};

  auto ret_agreed = get(_return, om::server::groupType::AGREED);

  EXPECT_TRUE(
      std::equal(agreed.begin(), agreed.end(), ret_agreed.segments.begin()));

  auto ret_group1 =
      get(_return, om::server::groupType::USER_MISSED, 118156, false, 1);
  EXPECT_TRUE(
      std::equal(group1.begin(), group1.end(), ret_group1.segments.begin()));

  auto ret_group2 =
      get(_return, om::server::groupType::USER_MISSED, 118156, false, 2);
  EXPECT_TRUE(
      std::equal(group2.begin(), group2.end(), ret_group2.segments.begin()));
}
}
}  // namespace om::test::
