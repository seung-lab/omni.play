#include "handler/handler.h"
#include "gtest/gtest.h"
#include "gmock/gmock.h"

#include "datalayer/paths.hpp"
#include "volume/segmentation.h"

using ::testing::_;
using namespace ::zi::mesh;

namespace om {
namespace test {

const server::group& get(const std::vector<server::group>& groups,
                         om::server::groupType::type type, int uid = 0,
                         bool dust = false) {
  auto iter = std::find_if(groups.begin(), groups.end(),
                           [type, uid, dust](const server::group& g) {
    return g.type == type && (g.user_id == uid || uid == 0) && g.dust == dust;
  });
  EXPECT_TRUE(iter != groups.end());
  return *iter;
}

TEST(GetConnectedGroupsTest, Simple) {
  file::Paths p("/omniData/e2198/e2198_a_s10_101_46_e17_116_61.omni");
  volume::Segmentation vol(p, 1);

  std::unordered_map<int, common::SegIDSet> groups;
  groups[2].insert({1, 2, 3, 4, 5, 6, 7});
  groups[3].insert({1, 3, 5, 7, 9, 11});
  groups[4].insert({1, 3});

  // Groups:
  //  ALL:      1, 2, 3, 4, 5, 6, 7, 9, 11
  //  AGREED:   1, 3
  //  2 FOUND:  2, 4, 6
  //  3 FOUND:  9, 11
  //  4 MISSED: 5, 7

  std::vector<server::group> _return;
  handler::get_connected_groups(_return, vol, groups);

  EXPECT_EQ(10, _return.size());
  auto all = get(_return, om::server::groupType::ALL);
  EXPECT_EQ(9, all.segments.size());

  auto agreed = get(_return, om::server::groupType::AGREED);
  EXPECT_EQ(2, agreed.segments.size());

  auto two = get(_return, server::groupType::USER_FOUND, 2);
  EXPECT_EQ(1, two.segments.size());

  auto three = get(_return, server::groupType::USER_FOUND, 3);
  EXPECT_EQ(2, three.segments.size());

  auto four = get(_return, server::groupType::USER_MISSED, 4);
  EXPECT_EQ(2, four.segments.size());
}

TEST(GetConnectedGroupsTest, Full) {
  file::Paths p("/omniData/e2198/e2198_ck_s16_86_61_e25_101_76.omni");
  volume::Segmentation vol(p, 1);

  std::unordered_map<int, common::SegIDSet> groups;
  // groups[1].insert(
  //     {907880, 854718, 711771, 748901, 770394, 801531, 738733, 721040,
  // 726240,
  //      723559, 723529, 888901, 895374, 731397, 920450, 743813, 743801,
  // 751403,
  //      750590, 736183, 736181, 838035, 891321, 746309, 822636, 738731,
  // 746297,
  //      723526, 719258, 911535, 726984, 845706, 734422, 731399, 782033,
  // 734401,
  //      744600, 734402, 732332, 899942, 749689, 726991, 721793, 727917,
  // 729327,
  //      868659, 727912, 747199, 830414, 726236, 764260, 738729, 863665,
  // 742993,
  //      790814, 740582, 715697, 741402, 730420, 737016, 879742, 731401,
  // 737027,
  //      817948, 732324, 726989, 742994, 785228, 747204, 739558, 807458,
  // 762431,
  //      764258, 745411, 744605, 744615, 730409, 730412, 730417, 883474,
  // 746276,
  //      726217, 719233, 746296});
  groups[118156].insert(
      {1319536, 1231593, 737027,  737016,  1081256, 847232,  899942,  757421,
       750597,  742994,  742993,  895374,  1404355, 1218826, 1217991, 1115317,
       1139963, 551794,  723559,  822661,  1224471, 868659,  723526,  915454,
       963070,  727056,  909824,  1406580, 723529,  1089175, 1291757, 882034,
       726217,  986417,  704701,  838035,  746296,  963074,  883474,  732418,
       781208,  839690,  953801,  885073,  557190,  1425035, 738733,  863703,
       509342,  822636,  727912,  750590,  738729,  1380504, 893056,  1207874,
       817979,  1098768, 785228,  817948,  859141,  750646,  1363328, 751403,
       835779,  790034,  740582,  675142,  1442503, 732332,  964565,  888901,
       830414,  764260,  910724,  1110520, 683556,  748901,  1034392, 1406582,
       711771,  558848,  1277369, 790814,  1031889, 968410,  731401,  1016134,
       744615,  745411,  907880,  963799,  909812,  1045191, 726989,  1228243,
       727917,  738731,  853251,  490673,  743801,  1066225, 479880,  922655,
       1365587, 1226778, 1370823, 946739,  1311705, 1044414, 762431,  835066,
       758309,  693634,  1368443, 845706,  1437222, 726991,  1277366, 801531,
       715697,  741402,  743813,  1004503, 1364118, 706563,  744600,  687860,
       744605,  951444,  891321,  744655,  989646,  573281,  1028089, 731399,
       1177618, 1285184, 566980,  996037,  888061,  721873,  878111,  507661,
       807458,  669062,  730412,  730420,  1301749, 731397,  719258,  963792,
       1407318, 640443,  911535,  918488,  767650,  1409527, 1089878, 721040,
       575922,  764258,  734401,  1286551, 863665,  770394,  734402,  734422,
       933395,  1389029, 585344,  480558,  736183,  879742,  782033,  1416894,
       1066228, 886563,  746276,  746297,  719233,  1258377, 746309,  747199,
       624408,  924102,  1042143, 487509,  736181,  1400607, 726984,  896183,
       749689,  935784,  879766,  1161158, 595056,  747204,  529616,  1086639,
       589859,  1014520, 554804,  920450,  1395303, 920454,  732324,  956865,
       957615,  715786,  857709,  1184500, 739558,  1264714, 1244727, 704700,
       1005315, 908791,  721793,  854718,  787709,  787710,  1274731});
  groups[102796].insert(
      {736183, 736181, 734422, 734402, 734401, 879742, 732332, 730417, 730412,
       730409, 711771, 729327, 727917, 726984, 757421, 845706, 726240, 723559,
       723529, 719258, 723526, 838035, 731399, 782033, 762431, 746309, 899942,
       726991, 749689, 750590, 751403, 721793, 747199, 764258, 731397, 920450,
       743813, 745411, 801531, 770394, 911535, 790814, 742993, 817948, 726236,
       764260, 830414, 732324, 726989, 742994, 854718, 883474, 748901, 740582,
       895374, 715697, 741402, 727912, 868659, 721040, 807458, 739558, 891321,
       747204, 785228, 730420, 737016, 731401, 737027, 863665, 738729, 719233,
       726217, 746296, 738733, 907880, 888901, 743801, 744600, 744605, 822636,
       738731, 746297, 744615, 746276});

  std::vector<server::group> _return;
  handler::get_connected_groups(_return, vol, groups);
}
}
}  // namespace om::test::
