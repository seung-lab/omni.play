// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "if/gen-cpp/RealTimeMesher.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

#include "real_time_meshes.hpp"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::zi::mesh;

class RealTimeMesherHandler : virtual public RealTimeMesherIf
{
private:
    zi::mesh::real_time_meshes rtm_;

public:
    RealTimeMesherHandler()
    {
        // Your initialization goes here
    }

    bool updateChunk(const std::string& uri, const vector3i& chunk mipLevel, const std::string& data)
    {
        boost::shared_ptr<boost::multi_array<uint32_t,3> > v
            ( new boost::multi_array<uint32_t,3>(extents[128][128][128]) );

        std::copy(data.begin(), data.end(), v->data());

        rtm_.update_chunk(chunk.x, chunk.y, chunk.z, v);
    }

    bool remesh(const bool sync)
    {
        rtm_.remesh(!sync);
        return sync;
    }

    void getMesh(meshData& _return, const std::string& uri, const vector3i& chunk, const int32_t mipLevel, const int32_t segId) {
        // Your implementation goes here
        printf("getMesh\n");
    }

    int64_t getMeshVersion(const std::string& uri, const vector3i& chunk, const int32_t mipLevel, const int32_t segId) {
        // Your implementation goes here
        printf("getMeshVersion\n");
    }

    void getMeshVersionsForMultipleChunks(std::vector<int64_t> & _return, const std::string& uri, const std::vector<vector3i> & chunk, const int32_t mipLevel, const int32_t segId) {
        // Your implementation goes here
        printf("getMeshVersionsForMultipleChunks\n");
    }

    void getMeshVersionsForMultipleChunksAndMips(std::vector<int64_t> & _return, const std::string& uri, const std::vector<vector4i> & chunkAndMip, const int32_t segId) {
        // Your implementation goes here
        printf("getMeshVersionsForMultipleChunksAndMips\n");
    }

};

