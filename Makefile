#############################################################################
# Makefile for building: bin/omni.server
# Generated by qmake (2.01a) (Qt 4.6.2) on: Thu Oct 6 11:56:09 2011
# Project:  omni.server.pro
# Template: app
# Command: /usr/bin/qmake -unix -o Makefile omni.server.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = 
CFLAGS        = -pipe -g $(DEFINES)
CXXFLAGS      = -pipe -Werror=return-type -DZI_USE_OPENMP -fopenmp -gstabs+ -DBOOST_MULTI_INDEX_DISABLE_SERIALIZATION -DBOOST_SPIRIT_THREADSAFE -DBOOST_SYSTEM_NO_DEPRECATED -DBOOST_FILESYSTEM_VERSION=3 -DBOOST_FILESYSTEM_NO_DEPRECATED -g $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -Isrc -Iinclude -Ilib -Iexternal/zi_lib -Iinclude/yaml-cpp/include -I../omni.common/lib/include -Iexternal/libs/Boost/include -Iexternal/libs/thrift/include/thrift
LINK          = g++
LFLAGS        = -DZI_USE_OPENMP -fopenmp -gstabs+
LIBS          = $(SUBLIBS)   ../omni.common/lib/bin/libomni.common.a external/libs/Boost/lib/libboost_filesystem.a external/libs/Boost/lib/libboost_iostreams.a external/libs/Boost/lib/libboost_system.a external/libs/Boost/lib/libboost_thread.a external/libs/thrift/lib/libthrift.a 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = build/

####### Files

SOURCES       = src/chunks/chunk.cpp \
		src/chunks/details/ptrToChunkDataMemMapVol.cpp \
		src/chunks/segChunk.cpp \
		src/datalayer/archive/channel.cpp \
		src/datalayer/archive/filter.cpp \
		src/datalayer/archive/project.cpp \
		src/datalayer/archive/segmentation.cpp \
		src/datalayer/dataPaths.cpp \
		src/datalayer/fs/compressedFile.cpp \
		src/datalayer/fs/file.cpp \
		src/main.cpp \
		src/mesh/io/chunk/meshChunkAllocTable.cpp \
		src/mesh/mesh.cpp \
		src/mesh/meshCoord.cpp \
		src/mesh/meshManager.cpp \
		src/project/details/affinityGraphManager.cpp \
		src/project/details/channelManager.cpp \
		src/project/details/projectVolumes.cpp \
		src/project/details/segmentationManager.cpp \
		src/project/project.cpp \
		src/project/projectGlobals.cpp \
		src/segment/lists/segmentList.cpp \
		src/segment/lists/segmentListByMRU.cpp \
		src/segment/lists/segmentListsTypes.cpp \
		src/segment/lowLevel/pagingPtrStore.cpp \
		src/segment/lowLevel/segmentGraph.cpp \
		src/segment/lowLevel/segmentsImplLowLevel.cpp \
		src/segment/lowLevel/store/segmentStore.cpp \
		src/segment/segment.cpp \
		src/segment/segmentIterator.cpp \
		src/segment/segments.cpp \
		src/segment/segmentsImpl.cpp \
		src/tiles/tile.cpp \
		src/tiles/tileCoord.cpp \
		src/volume/affinityGraph.cpp \
		src/volume/channel.cpp \
		src/volume/channelFolder.cpp \
		src/volume/channelImpl.cpp \
		src/volume/io/memMappedVolume.cpp \
		src/volume/io/volumeData.cpp \
		src/volume/mipVolume.cpp \
		src/volume/segmentation.cpp \
		src/volume/segmentationFolder.cpp \
		src/volume/segmentationLoader.cpp \
		src/volume/volumeTypes.cpp 
OBJECTS       = build/chunk.o \
		build/ptrToChunkDataMemMapVol.o \
		build/segChunk.o \
		build/channel.o \
		build/filter.o \
		build/project.o \
		build/segmentation.o \
		build/dataPaths.o \
		build/compressedFile.o \
		build/file.o \
		build/main.o \
		build/meshChunkAllocTable.o \
		build/mesh.o \
		build/meshCoord.o \
		build/meshManager.o \
		build/affinityGraphManager.o \
		build/channelManager.o \
		build/projectVolumes.o \
		build/segmentationManager.o \
		build/project.o \
		build/projectGlobals.o \
		build/segmentList.o \
		build/segmentListByMRU.o \
		build/segmentListsTypes.o \
		build/pagingPtrStore.o \
		build/segmentGraph.o \
		build/segmentsImplLowLevel.o \
		build/segmentStore.o \
		build/segment.o \
		build/segmentIterator.o \
		build/segments.o \
		build/segmentsImpl.o \
		build/tile.o \
		build/tileCoord.o \
		build/affinityGraph.o \
		build/channel.o \
		build/channelFolder.o \
		build/channelImpl.o \
		build/memMappedVolume.o \
		build/volumeData.o \
		build/mipVolume.o \
		build/segmentation.o \
		build/segmentationFolder.o \
		build/segmentationLoader.o \
		build/volumeTypes.o
DIST          = /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		omni.server.pro
QMAKE_TARGET  = omni.server
DESTDIR       = bin/
TARGET        = bin/omni.server

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	@$(CHK_DIR_EXISTS) bin/ || $(MKDIR) bin/ 
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: omni.server.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf
	$(QMAKE) -unix -o Makefile omni.server.pro
/usr/share/qt4/mkspecs/common/g++.conf:
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/debug.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
qmake:  FORCE
	@$(QMAKE) -unix -o Makefile omni.server.pro

dist: 
	@$(CHK_DIR_EXISTS) build/omni.server1.0.0 || $(MKDIR) build/omni.server1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) build/omni.server1.0.0/ && (cd `dirname build/omni.server1.0.0` && $(TAR) omni.server1.0.0.tar omni.server1.0.0 && $(COMPRESS) omni.server1.0.0.tar) && $(MOVE) `dirname build/omni.server1.0.0`/omni.server1.0.0.tar.gz . && $(DEL_FILE) -r build/omni.server1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


compiler_clean: 

####### Compile

build/chunk.o: src/chunks/chunk.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/chunk.o src/chunks/chunk.cpp

build/ptrToChunkDataMemMapVol.o: src/chunks/details/ptrToChunkDataMemMapVol.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/ptrToChunkDataMemMapVol.o src/chunks/details/ptrToChunkDataMemMapVol.cpp

build/segChunk.o: src/chunks/segChunk.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segChunk.o src/chunks/segChunk.cpp

build/channel.o: src/datalayer/archive/channel.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/channel.o src/datalayer/archive/channel.cpp

build/filter.o: src/datalayer/archive/filter.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/filter.o src/datalayer/archive/filter.cpp

build/project.o: src/datalayer/archive/project.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/project.o src/datalayer/archive/project.cpp

build/segmentation.o: src/datalayer/archive/segmentation.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentation.o src/datalayer/archive/segmentation.cpp

build/dataPaths.o: src/datalayer/dataPaths.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/dataPaths.o src/datalayer/dataPaths.cpp

build/compressedFile.o: src/datalayer/fs/compressedFile.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/compressedFile.o src/datalayer/fs/compressedFile.cpp

build/file.o: src/datalayer/fs/file.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/file.o src/datalayer/fs/file.cpp

build/main.o: src/main.cpp src/serverHandler.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/main.o src/main.cpp

build/meshChunkAllocTable.o: src/mesh/io/chunk/meshChunkAllocTable.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/meshChunkAllocTable.o src/mesh/io/chunk/meshChunkAllocTable.cpp

build/mesh.o: src/mesh/mesh.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/mesh.o src/mesh/mesh.cpp

build/meshCoord.o: src/mesh/meshCoord.cpp src/mesh/meshCoord.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/meshCoord.o src/mesh/meshCoord.cpp

build/meshManager.o: src/mesh/meshManager.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/meshManager.o src/mesh/meshManager.cpp

build/affinityGraphManager.o: src/project/details/affinityGraphManager.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/affinityGraphManager.o src/project/details/affinityGraphManager.cpp

build/channelManager.o: src/project/details/channelManager.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/channelManager.o src/project/details/channelManager.cpp

build/projectVolumes.o: src/project/details/projectVolumes.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/projectVolumes.o src/project/details/projectVolumes.cpp

build/segmentationManager.o: src/project/details/segmentationManager.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentationManager.o src/project/details/segmentationManager.cpp

build/project.o: src/project/project.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/project.o src/project/project.cpp

build/projectGlobals.o: src/project/projectGlobals.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/projectGlobals.o src/project/projectGlobals.cpp

build/segmentList.o: src/segment/lists/segmentList.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentList.o src/segment/lists/segmentList.cpp

build/segmentListByMRU.o: src/segment/lists/segmentListByMRU.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentListByMRU.o src/segment/lists/segmentListByMRU.cpp

build/segmentListsTypes.o: src/segment/lists/segmentListsTypes.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentListsTypes.o src/segment/lists/segmentListsTypes.cpp

build/pagingPtrStore.o: src/segment/lowLevel/pagingPtrStore.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/pagingPtrStore.o src/segment/lowLevel/pagingPtrStore.cpp

build/segmentGraph.o: src/segment/lowLevel/segmentGraph.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentGraph.o src/segment/lowLevel/segmentGraph.cpp

build/segmentsImplLowLevel.o: src/segment/lowLevel/segmentsImplLowLevel.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentsImplLowLevel.o src/segment/lowLevel/segmentsImplLowLevel.cpp

build/segmentStore.o: src/segment/lowLevel/store/segmentStore.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentStore.o src/segment/lowLevel/store/segmentStore.cpp

build/segment.o: src/segment/segment.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segment.o src/segment/segment.cpp

build/segmentIterator.o: src/segment/segmentIterator.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentIterator.o src/segment/segmentIterator.cpp

build/segments.o: src/segment/segments.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segments.o src/segment/segments.cpp

build/segmentsImpl.o: src/segment/segmentsImpl.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentsImpl.o src/segment/segmentsImpl.cpp

build/tile.o: src/tiles/tile.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/tile.o src/tiles/tile.cpp

build/tileCoord.o: src/tiles/tileCoord.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/tileCoord.o src/tiles/tileCoord.cpp

build/affinityGraph.o: src/volume/affinityGraph.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/affinityGraph.o src/volume/affinityGraph.cpp

build/channel.o: src/volume/channel.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/channel.o src/volume/channel.cpp

build/channelFolder.o: src/volume/channelFolder.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/channelFolder.o src/volume/channelFolder.cpp

build/channelImpl.o: src/volume/channelImpl.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/channelImpl.o src/volume/channelImpl.cpp

build/memMappedVolume.o: src/volume/io/memMappedVolume.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/memMappedVolume.o src/volume/io/memMappedVolume.cpp

build/volumeData.o: src/volume/io/volumeData.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/volumeData.o src/volume/io/volumeData.cpp

build/mipVolume.o: src/volume/mipVolume.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/mipVolume.o src/volume/mipVolume.cpp

build/segmentation.o: src/volume/segmentation.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentation.o src/volume/segmentation.cpp

build/segmentationFolder.o: src/volume/segmentationFolder.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentationFolder.o src/volume/segmentationFolder.cpp

build/segmentationLoader.o: src/volume/segmentationLoader.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/segmentationLoader.o src/volume/segmentationLoader.cpp

build/volumeTypes.o: src/volume/volumeTypes.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/volumeTypes.o src/volume/volumeTypes.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

